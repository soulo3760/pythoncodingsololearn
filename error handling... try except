Exceptions can often be predictable. To handle them and prevent program failure, you can use a try/except statement.

The try block holds code that might cause an exception.
If an exception occurs, execution of the try block stops, and the except block is executed, allowing the program to continue running.
Exception handling allows you to prevent program failure by processing potential exceptions in the way you need.

Exceptions are very helpful when your program interacts with user input. While you can't control what a user inputs, you can control your program's behavior when the input doesn't match the expected format. 
For instance, this program expects a numerical value as input and will throw an exception when the user inputs a non-numerical one.

price = input()
try:
  price_value = int(price)
  print(price_value)
except ValueError:
  print("Please enter a number")
############
#######################
####################################
You can use the finally statement to perform an operation after the try/except block, no matter if an exception occurred or not.

prices = [559, 879, "N/A", 349]
try:
  print(sum(prices))
except TypeError:
  print("Check the prices")
finally:
  print("Need help? Contact us")

OUTPUT
OUTPUT
Check the prices
Need help? Contact us

###################
########################
########
#
#
#
The else statement can be used in conjunction with the try/except block and will execute only when no error occurs in the try block.

books = ['Harry Potter', 'Dune', 'Emma']
try:
  choice = books[1]
except IndexError:
  print("Out of range")
else:
  print(choice + " is a great choice!")


###############
##########
##########################
You can trigger your own exceptions based on specific conditions using the raise statement. 
This will immediately stop the program's execution and indicate an error has occurred.

print("Rate from 0 to 10")
rate = 15
if rate > 30 or rate < 0:
  raise ValueError
OUTPUT
OUTPUT
Rate from 0 to 10

########but@#########but#########
############
print("Rate from 0 to 10")
rate = 15
if rate > 10 or rate < 0:
  raise ValueError

OUTPUT
Rate from 0 to 10

Traceback (most recent call last):
  File "./Playground/file0.py", line 4, in <module>
    raise ValueError
ValueError
